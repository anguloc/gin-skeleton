// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qiushenglei/gin-skeleton/internal/app/data/mysql/rw_isolate/model"
)

func newOrder1(db *gorm.DB, opts ...gen.DOOption) order1 {
	_order1 := order1{}

	_order1.order1Do.UseDB(db, opts...)
	_order1.order1Do.UseModel(&model.Order1{})

	tableName := _order1.order1Do.TableName()
	_order1.ALL = field.NewAsterisk(tableName)
	_order1.ID = field.NewUint32(tableName, "id")
	_order1.OrderID = field.NewString(tableName, "order_id")
	_order1.AppID = field.NewString(tableName, "app_id")
	_order1.Fee = field.NewInt32(tableName, "fee")
	_order1.AddTime = field.NewTime(tableName, "add_time")
	_order1.UpdateTime = field.NewTime(tableName, "update_time")
	_order1.IsDeleted = field.NewInt32(tableName, "is_deleted")

	_order1.fillFieldMap()

	return _order1
}

type order1 struct {
	order1Do order1Do

	ALL        field.Asterisk
	ID         field.Uint32
	OrderID    field.String
	AppID      field.String
	Fee        field.Int32
	AddTime    field.Time
	UpdateTime field.Time
	IsDeleted  field.Int32

	fieldMap map[string]field.Expr
}

func (o order1) Table(newTableName string) *order1 {
	o.order1Do.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o order1) As(alias string) *order1 {
	o.order1Do.DO = *(o.order1Do.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *order1) updateTableName(table string) *order1 {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint32(table, "id")
	o.OrderID = field.NewString(table, "order_id")
	o.AppID = field.NewString(table, "app_id")
	o.Fee = field.NewInt32(table, "fee")
	o.AddTime = field.NewTime(table, "add_time")
	o.UpdateTime = field.NewTime(table, "update_time")
	o.IsDeleted = field.NewInt32(table, "is_deleted")

	o.fillFieldMap()

	return o
}

func (o *order1) WithContext(ctx context.Context) *order1Do { return o.order1Do.WithContext(ctx) }

func (o order1) TableName() string { return o.order1Do.TableName() }

func (o order1) Alias() string { return o.order1Do.Alias() }

func (o order1) Columns(cols ...field.Expr) gen.Columns { return o.order1Do.Columns(cols...) }

func (o *order1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *order1) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["app_id"] = o.AppID
	o.fieldMap["fee"] = o.Fee
	o.fieldMap["add_time"] = o.AddTime
	o.fieldMap["update_time"] = o.UpdateTime
	o.fieldMap["is_deleted"] = o.IsDeleted
}

func (o order1) clone(db *gorm.DB) order1 {
	o.order1Do.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o order1) replaceDB(db *gorm.DB) order1 {
	o.order1Do.ReplaceDB(db)
	return o
}

type order1Do struct{ gen.DO }

func (o order1Do) Debug() *order1Do {
	return o.withDO(o.DO.Debug())
}

func (o order1Do) WithContext(ctx context.Context) *order1Do {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o order1Do) ReadDB() *order1Do {
	return o.Clauses(dbresolver.Read)
}

func (o order1Do) WriteDB() *order1Do {
	return o.Clauses(dbresolver.Write)
}

func (o order1Do) Session(config *gorm.Session) *order1Do {
	return o.withDO(o.DO.Session(config))
}

func (o order1Do) Clauses(conds ...clause.Expression) *order1Do {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o order1Do) Returning(value interface{}, columns ...string) *order1Do {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o order1Do) Not(conds ...gen.Condition) *order1Do {
	return o.withDO(o.DO.Not(conds...))
}

func (o order1Do) Or(conds ...gen.Condition) *order1Do {
	return o.withDO(o.DO.Or(conds...))
}

func (o order1Do) Select(conds ...field.Expr) *order1Do {
	return o.withDO(o.DO.Select(conds...))
}

func (o order1Do) Where(conds ...gen.Condition) *order1Do {
	return o.withDO(o.DO.Where(conds...))
}

func (o order1Do) Order(conds ...field.Expr) *order1Do {
	return o.withDO(o.DO.Order(conds...))
}

func (o order1Do) Distinct(cols ...field.Expr) *order1Do {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o order1Do) Omit(cols ...field.Expr) *order1Do {
	return o.withDO(o.DO.Omit(cols...))
}

func (o order1Do) Join(table schema.Tabler, on ...field.Expr) *order1Do {
	return o.withDO(o.DO.Join(table, on...))
}

func (o order1Do) LeftJoin(table schema.Tabler, on ...field.Expr) *order1Do {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o order1Do) RightJoin(table schema.Tabler, on ...field.Expr) *order1Do {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o order1Do) Group(cols ...field.Expr) *order1Do {
	return o.withDO(o.DO.Group(cols...))
}

func (o order1Do) Having(conds ...gen.Condition) *order1Do {
	return o.withDO(o.DO.Having(conds...))
}

func (o order1Do) Limit(limit int) *order1Do {
	return o.withDO(o.DO.Limit(limit))
}

func (o order1Do) Offset(offset int) *order1Do {
	return o.withDO(o.DO.Offset(offset))
}

func (o order1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *order1Do {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o order1Do) Unscoped() *order1Do {
	return o.withDO(o.DO.Unscoped())
}

func (o order1Do) Create(values ...*model.Order1) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o order1Do) CreateInBatches(values []*model.Order1, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o order1Do) Save(values ...*model.Order1) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o order1Do) First() (*model.Order1, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order1), nil
	}
}

func (o order1Do) Take() (*model.Order1, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order1), nil
	}
}

func (o order1Do) Last() (*model.Order1, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order1), nil
	}
}

func (o order1Do) Find() ([]*model.Order1, error) {
	result, err := o.DO.Find()
	return result.([]*model.Order1), err
}

func (o order1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Order1, err error) {
	buf := make([]*model.Order1, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o order1Do) FindInBatches(result *[]*model.Order1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o order1Do) Attrs(attrs ...field.AssignExpr) *order1Do {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o order1Do) Assign(attrs ...field.AssignExpr) *order1Do {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o order1Do) Joins(fields ...field.RelationField) *order1Do {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o order1Do) Preload(fields ...field.RelationField) *order1Do {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o order1Do) FirstOrInit() (*model.Order1, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order1), nil
	}
}

func (o order1Do) FirstOrCreate() (*model.Order1, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Order1), nil
	}
}

func (o order1Do) FindByPage(offset int, limit int) (result []*model.Order1, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o order1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o order1Do) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o order1Do) Delete(models ...*model.Order1) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *order1Do) withDO(do gen.Dao) *order1Do {
	o.DO = *do.(*gen.DO)
	return o
}

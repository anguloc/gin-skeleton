// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/qiushenglei/gin-skeleton/internal/app/data/mysql/model"
)

func newScore(db *gorm.DB, opts ...gen.DOOption) score {
	_score := score{}

	_score.scoreDo.UseDB(db, opts...)
	_score.scoreDo.UseModel(&model.Score{})

	tableName := _score.scoreDo.TableName()
	_score.ALL = field.NewAsterisk(tableName)
	_score.ID = field.NewUint32(tableName, "id")
	_score.StudentID = field.NewString(tableName, "student_id")
	_score.SubjectID = field.NewUint32(tableName, "subject_id")
	_score.Score = field.NewInt32(tableName, "score")
	_score.AddTime = field.NewTime(tableName, "add_time")
	_score.UpdateTime = field.NewTime(tableName, "update_time")

	_score.fillFieldMap()

	return _score
}

type score struct {
	scoreDo scoreDo

	ALL        field.Asterisk
	ID         field.Uint32
	StudentID  field.String
	SubjectID  field.Uint32
	Score      field.Int32
	AddTime    field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (s score) Table(newTableName string) *score {
	s.scoreDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s score) As(alias string) *score {
	s.scoreDo.DO = *(s.scoreDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *score) updateTableName(table string) *score {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "id")
	s.StudentID = field.NewString(table, "student_id")
	s.SubjectID = field.NewUint32(table, "subject_id")
	s.Score = field.NewInt32(table, "score")
	s.AddTime = field.NewTime(table, "add_time")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *score) WithContext(ctx context.Context) *scoreDo { return s.scoreDo.WithContext(ctx) }

func (s score) TableName() string { return s.scoreDo.TableName() }

func (s score) Alias() string { return s.scoreDo.Alias() }

func (s score) Columns(cols ...field.Expr) gen.Columns { return s.scoreDo.Columns(cols...) }

func (s *score) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *score) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["student_id"] = s.StudentID
	s.fieldMap["subject_id"] = s.SubjectID
	s.fieldMap["score"] = s.Score
	s.fieldMap["add_time"] = s.AddTime
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s score) clone(db *gorm.DB) score {
	s.scoreDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s score) replaceDB(db *gorm.DB) score {
	s.scoreDo.ReplaceDB(db)
	return s
}

type scoreDo struct{ gen.DO }

func (s scoreDo) Debug() *scoreDo {
	return s.withDO(s.DO.Debug())
}

func (s scoreDo) WithContext(ctx context.Context) *scoreDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scoreDo) ReadDB() *scoreDo {
	return s.Clauses(dbresolver.Read)
}

func (s scoreDo) WriteDB() *scoreDo {
	return s.Clauses(dbresolver.Write)
}

func (s scoreDo) Session(config *gorm.Session) *scoreDo {
	return s.withDO(s.DO.Session(config))
}

func (s scoreDo) Clauses(conds ...clause.Expression) *scoreDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scoreDo) Returning(value interface{}, columns ...string) *scoreDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scoreDo) Not(conds ...gen.Condition) *scoreDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scoreDo) Or(conds ...gen.Condition) *scoreDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scoreDo) Select(conds ...field.Expr) *scoreDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scoreDo) Where(conds ...gen.Condition) *scoreDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scoreDo) Order(conds ...field.Expr) *scoreDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scoreDo) Distinct(cols ...field.Expr) *scoreDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scoreDo) Omit(cols ...field.Expr) *scoreDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scoreDo) Join(table schema.Tabler, on ...field.Expr) *scoreDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scoreDo) LeftJoin(table schema.Tabler, on ...field.Expr) *scoreDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scoreDo) RightJoin(table schema.Tabler, on ...field.Expr) *scoreDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scoreDo) Group(cols ...field.Expr) *scoreDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scoreDo) Having(conds ...gen.Condition) *scoreDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scoreDo) Limit(limit int) *scoreDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scoreDo) Offset(offset int) *scoreDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scoreDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *scoreDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scoreDo) Unscoped() *scoreDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scoreDo) Create(values ...*model.Score) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scoreDo) CreateInBatches(values []*model.Score, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scoreDo) Save(values ...*model.Score) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scoreDo) First() (*model.Score, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) Take() (*model.Score, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) Last() (*model.Score, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) Find() ([]*model.Score, error) {
	result, err := s.DO.Find()
	return result.([]*model.Score), err
}

func (s scoreDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Score, err error) {
	buf := make([]*model.Score, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scoreDo) FindInBatches(result *[]*model.Score, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scoreDo) Attrs(attrs ...field.AssignExpr) *scoreDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scoreDo) Assign(attrs ...field.AssignExpr) *scoreDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scoreDo) Joins(fields ...field.RelationField) *scoreDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scoreDo) Preload(fields ...field.RelationField) *scoreDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scoreDo) FirstOrInit() (*model.Score, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) FirstOrCreate() (*model.Score, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) FindByPage(offset int, limit int) (result []*model.Score, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scoreDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scoreDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scoreDo) Delete(models ...*model.Score) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scoreDo) withDO(do gen.Dao) *scoreDo {
	s.DO = *do.(*gen.DO)
	return s
}
